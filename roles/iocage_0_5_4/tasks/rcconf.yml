---

- name: "Rcconf: Configure iocage in /etc/rc.conf"
  ansible.builtin.lineinfile:
    dest: /etc/rc.conf
    regexp: ^\s*{{ item.regexp }}\s*=(.*)$
    line: '{{ item.regexp }}="{{ item.val }}"'
    backup: "{{ freebsd_iocage_backup_conf | bool }}"
  loop: "{{ freebsd_iocage_rcconf }}"

- name: Set freebsd_iocage_rcvar
  block:

    - name: "Rcconf: Get iocage rcvar" # noqa: no-changed-when
      register: result
      changed_when: false
      check_mode: false
      ansible.builtin.command: /usr/local/etc/rc.d/iocage rcvar

    - name: "Rcconf: Set freebsd_iocage_rcvar"
      ansible.builtin.set_fact:
        freebsd_iocage_rcvar: "{{ result.stdout | community.general.jc('ini') }}"

    - name: "Rcconf: Debug freebsd_iocage_rcvar freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: freebsd_iocage_rcvar

- name: Fail if service is disabled and service start, restart, or stop is active
  when: actions_active | length > 0
  vars:
    actions:
      start: "{{ freebsd_iocage_start | bool }}"
      restart: "{{ freebsd_iocage_restart | bool }}"
      stop: "{{ freebsd_iocage_stop | bool }}"
    actions_active: "{{ actions | dict2items | selectattr('value') }}"
  ansible.builtin.assert:
    that: freebsd_iocage_enable | bool or freebsd_iocage_rcvar.iocage_enable | upper == 'YES'
    quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
    fail_msg: "[ERR] Service start, restart, or stop is active and service is disabled."
    success_msg: "[OK]  Service start, restart, or stop is active and service is enabled."

- name: Enable iocage
  when:
    - freebsd_iocage_enable | bool
    - freebsd_iocage_rcvar.iocage_enable | upper != 'YES'
  block:

    - name: "Rcconf: Enable iocage" # noqa: no-changed-when
      environment: "{{ freebsd_iocage_env }}"
      register: result
      ansible.builtin.command: /usr/local/etc/rc.d/iocage enable

    - name: "Rcconf: Debug enable iocage freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: result

- name: Start, Restart, or Stop iocage
  when:
    - freebsd_iocage_enable | bool or freebsd_iocage_rcvar.iocage_enable | upper == 'YES'
    - actions_active | length > 0
  vars:
    actions:
      start: "{{ freebsd_iocage_start | bool }}"
      restart: "{{ freebsd_iocage_restart | bool }}"
      stop: "{{ freebsd_iocage_stop | bool }}"
    actions_active: "{{ actions | dict2items | selectattr('value') }}"
  block:

    - name: "Rcconf: iocage {{ actions_active_name }}" # noqa: no-changed-when
      vars:
        actions_active_name: "{{ actions_active | map(attribute='key') | first }}"
      environment: "{{ freebsd_iocage_env }}"
      register: result
      ansible.builtin.command: "/usr/local/etc/rc.d/iocage {{ actions_active_name }}"

    - name: "Rcconf: Debug result freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: result

- name: Disable iocage
  when:
    - not freebsd_iocage_enable | bool
    - freebsd_iocage_rcvar.iocage_enable | upper != 'NO'
  block:

    - name: "Rcconf: Disable iocage" # noqa: no-changed-when
      environment: "{{ freebsd_iocage_env }}"
      register: result
      ansible.builtin.command: /usr/local/etc/rc.d/iocage disable

    - name: "Rcconf: Debug disable iocage freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: result

# EOF
