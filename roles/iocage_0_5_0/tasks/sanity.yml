---

- name: Service start, restart, and stop are mutually exclusive
  when: freebsd_iocage_sanity_service | bool
  block:

    - name: "Sanity: Debug service start, restart, and stop freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        msg: |
          freebsd_iocage_start: {{ freebsd_iocage_start | bool }}
          freebsd_iocage_restart: {{ freebsd_iocage_restart | bool }}
          freebsd_iocage_stop: {{ freebsd_iocage_stop | bool }}

    - name: "Sanity: Service start, restart, and stop are mutually exclusive"
      vars:
        actions_vars: [freebsd_iocage_start, freebsd_iocage_restart, freebsd_iocage_stop]
        actions_vals: "{{ [freebsd_iocage_start, freebsd_iocage_restart, freebsd_iocage_stop] | map('bool') }}"
        actions_dict: "{{ dict(actions_vars | zip(actions_vals)) }}"
        actions_active: "{{ actions_dict | dict2items | selectattr('value') | map(attribute='key') }}"
      ansible.builtin.assert:
        that: actions_active | length < 2
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: >-
          [ERR] Too many active actions: {{ actions_active }}
          Only one action (start, stop, restart) allowed.
        success_msg: >-
          [OK]  Active actions: {{ actions_active }}

- name: Environment LANG, LC_COLLATE
  when: freebsd_iocage_sanity_env | bool
  block:

    - name: "Sanity: Get environment."
      ansible.builtin.setup:
        gather_subset: env

    - name: "Sanity: Debug mounts freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: ansible_env

    - name: "Sanity: Environment LANG = {{ freebsd_iocage_lang }}"
      ansible.builtin.assert:
        that: ansible_env.LANG == freebsd_iocage_lang
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] Environment LANG = {{ ansible_env.LANG }}. Should be {{ freebsd_iocage_lang }}"
        success_msg: "[OK]  LANG = {{ freebsd_iocage_lang }}"

    - name: "Sanity: Environment LC_COLLATE = C"
      when: ansible_env.LC_COLLATE is defined
      ansible.builtin.assert:
        that: ansible_env.LC_COLLATE == "C"
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] Environment LC_COLLATE = {{ ansible_env.LC_COLLATE }}. Should be C"
        success_msg: "[OK]  LC_COLLATE = C"

- name: Mounted /dev/fd to fdescfs
  when: freebsd_iocage_sanity_fdesc | bool
  block:

    - name: "Sanity: Get mounts"
      ansible.builtin.setup:
        gather_subset: mounts

    - name: "Sanity: Debug mounts freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: ansible_mounts | map(attribute='mount')

    - name: "Sanity: /dev/fd mounted to fdescfs"
      vars:
        mounts_fstypes: "{{ ansible_mounts | items2dict(key_name='mount', value_name='fstype') }}"
      ansible.builtin.assert:
        that: mounts_fstypes['/dev/fd'] | d('undef') == 'fdescfs'
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] /dev/fd not mounted to fdescfs."
        success_msg: "[OK]  /dev/fd mounted to fdescfs."

- name: Mandatory kernel options VIMAGE, RACCT, RCTL
  when: freebsd_iocage_sanity_kernel | bool
  block:

    - name: "Sanity: Get sysctl kern.conftxt"
      changed_when: false
      check_mode: false
      register: result
      ansible.builtin.command: sysctl kern.conftxt

    - name: "Sanity: Debug result freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: result.stdout_lines | select('match', 'options')

    - name: "Sanity: Mandatory kernel options VIMAGE, RACCT, and RCTL."
      vars:
        kernel_options: "{{ result.stdout_lines | select('match', 'options') | map('split') | map('last') }}"
        missing_options: "{{ ['VIMAGE', 'RACCT', 'RCTL'] | difference(kernel_options) }}"
      ansible.builtin.assert:
        that: missing_options | length == 0
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] Missing kernel option(s): {{ missing_options }}"
        success_msg: "[OK]  kernel options VIMAGE, RACCT, RCTL."

    - name: "Sanity: Kernel nooptions SCTP."
      when: freebsd_iocage_sanity_kernel_sctp | bool
      ansible.builtin.assert:
        that: "'nooptions SCTP_SUPPORT' in result.stdout_lines"
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] Kernel option SCTP should be disabled."
        success_msg: "[OK]  kernel option SCTP is disabled."

- name: Mandatory /boot/loader.conf
  when: freebsd_iocage_sanity_loader | bool
  vars:
    loader_dict: "{{ loader_conf.content | b64decode | community.general.jc('ini') }}"
  block:

    - name: "Sanity: Read /boot/loader.conf"
      register: loader_conf
      ansible.builtin.slurp:
        src: /boot/loader.conf

    - name: "Sanity: Debug loader_dict freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: loader_dict

    - name: "Sanity: kern.racct.enable = 1"
      when: loader_dict['kern.racct.enable'] is defined
      ansible.builtin.assert:
        that: loader_dict['kern.racct.enable'] == '1'
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] kern.racct.enable disabled."
        success_msg: "[OK]  kern.racct.enable = 1"

- name: This process is not running in jail.
  when: freebsd_iocage_sanity_injail | bool
  vars:
    sysctl_dict: "{{ result.stdout | from_yaml }}"
  block:

    - name: "Sanity: Get sysctl security.jail.jailed"
      changed_when: false
      check_mode: false
      register: result
      ansible.builtin.command: sysctl security.jail.jailed

    - name: "Sanity: Debug result freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: sysctl_dict

    - name: "Sanity: Not in jail."
      ansible.builtin.assert:
        that: sysctl_dict['security.jail.jailed'] == 0
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] This process is running in jail."
        success_msg: "[OK]  This process is not running in jail."

- name: ZFS
  when: freebsd_iocage_sanity_zfs | bool
  vars:
    zfs_pools: "{{ ansible_zfs_pools | map(attribute='name') }}"
    zfs_ds: "{{ ansible_zfs_datasets | selectattr('mountpoint', 'defined')
                                     | map(attribute='mountpoint') }}"
  block:

    - name: "Sanity: Get ZFS pools."
      community.general.zpool_facts:

    - name: "Sanity: Debug result freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: zfs_pools

    - name: "Sanity: ZFS pool exists."
      when: freebsd_iocage_sanity_zfs_pool_exists | bool
      ansible.builtin.assert:
        that: freebsd_iocage_pool in zfs_pools
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] ZFS pool {{ freebsd_iocage_pool }} missing."
        success_msg: "[OK]  ZFS pool {{ freebsd_iocage_pool }} exists."

    - name: "Sanity: Get ZFS datasets."
      community.general.zfs_facts:
        name: "{{ freebsd_iocage_pool }}"
        depth: 1

    - name: "Sanity: Debug result freebsd_iocage_debug={{ freebsd_iocage_debug }}"
      when: freebsd_iocage_debug | bool
      ansible.builtin.debug:
        var: zfs_ds

    - name: "Sanity: ZFS pool activated."
      when: freebsd_iocage_sanity_zfs_pool_active | bool
      ansible.builtin.assert:
        that: freebsd_iocage_mount in zfs_ds
        quiet: "{{ freebsd_iocage_assert_quiet | bool }}"
        fail_msg: "[ERR] ZFS pool {{ freebsd_iocage_pool }} not activated."
        success_msg: "[OK]  ZFS pool {{ freebsd_iocage_pool }} activated."

# EOF
