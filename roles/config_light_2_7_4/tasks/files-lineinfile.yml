---
  # lines
- name: "Files-lineinfile: Debug lines in cl_files.values() cl_debug={{ cl_debug }}"
  when: cl_debug | bool
  ansible.builtin.debug:
    msg: "{{ cl_files.values() | selectattr('lines', 'defined') | list }}"

- name: "Files-lineinfile: Lineinfile lines."
  register: cl_results_lines
  notify: "{{ item.0.handlers | d(omit) }}"
  ansible.builtin.lineinfile:
    path: "{{ item.0.path }}"
    regexp: "{{ item.1.regexp | d(omit) }}"
    line: "{{ item.1.line | d(omit) }}"
    backrefs: "{{ item.1.backrefs | d(omit) }}"
    state: "{{ item.1.state | d(omit) }}"
    firstmatch: "{{ item.1.firstmatch | d(omit) }}"
    insertafter: "{{ item.1.insertafter | d(omit) }}"
    insertbefore: "{{ item.1.insertbefore | d(omit) }}"
    owner: "{{ item.0.owner | d(omit) }}"
    group: "{{ item.0.group | d(omit) }}"
    mode: "{{ item.0.mode | d(omit) }}"
    attributes: "{{ item.0.attributes | d(omit) }}"
    others: "{{ item.0.others | d(omit) }}"
    create: "{{ item.0.create | d(omit) }}"
    validate: "{{ item.0.validate | d(omit) }}"
    # backup: "{{ cl_backup }}"
  loop: "{{ cl_files.values() | list | subelements('lines', skip_missing=true) }}"
  loop_control:
    label: "{{ item.0.path }} {{ item.1.line | d('') }}"

- name: Debug
  when: cl_debug | bool
  block:

    - name: "Files-lineinfile: Debug cl_results_lines cl_debug={{ cl_debug }}"
      ansible.builtin.debug:
        var: cl_results_lines

    - name: "Files-lineinfile: Debug changed lines paths cl_debug={{ cl_debug }}"
      ansible.builtin.debug:
        msg: "{{ cl_results_lines.results | d([]) | json_query('[?changed].invocation.module_args.path') }}"

  # dict
- name: "Files-lineinfile: Debug dict in cl_files.values() cl_debug={{ cl_debug }}"
  when: cl_debug | bool
  ansible.builtin.debug:
    msg: "{{ cl_files.values() | selectattr('dict', 'defined') | list }}"

- name: "Files-lineinfile: Lineinfile dict."
  register: cl_results_dict
  notify: "{{ item.0.handlers | d(omit) }}"
  ansible.builtin.lineinfile:
    path: "{{ item.0.path }}"
    regexp: ^\s*[#;]*\s*{{ item.1.key }}\s*{{ item.0.assignment|d("=")|trim }}\s*(.*)$
    line: "{{ item.1.key }}{{ item.0.assignment | d('=') }}{{ item.1.value }}"
    backrefs: "{{ item.1.backrefs | d(omit) }}"
    state: "{{ item.1.state | d(omit) }}"
    firstmatch: "{{ item.1.firstmatch | d(omit) }}"
    insertafter: "{{ item.1.insertafter | d(omit) }}"
    insertbefore: "{{ item.1.insertbefore | d(omit) }}"
    owner: "{{ item.0.owner | d(omit) }}"
    group: "{{ item.0.group | d(omit) }}"
    mode: "{{ item.0.mode | d(omit) }}"
    attributes: "{{ item.0.attributes | d(omit) }}"
    others: "{{ item.0.others | d(omit) }}"
    create: "{{ item.0.create | d(omit) }}"
    validate: "{{ item.0.validate | d(omit) }}"
    # backup: "{{ cl_backup }}"
  loop: "{{ cl_files.values() | list | subelements('dict', skip_missing=true) }}"
  loop_control:
    label: "{{ item.0.path }} {{ item.1.key }}"

- name: Debug
  when: cl_debug | bool
  block:

    - name: "Files-lineinfile: Debug cl_results_dict cl_debug={{ cl_debug }}"
      ansible.builtin.debug:
        var: cl_results_dict

    - name: "Files-lineinfile: Debug changed dict paths cl_debug={{ cl_debug }}"
      ansible.builtin.debug:
        msg: "{{ cl_results_dict.results | d([]) | json_query('[?changed].invocation.module_args.path') }}"

# EOF
