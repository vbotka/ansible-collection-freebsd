---
- name: Collections installed.
  when: cl_sanity_collections | bool
  block:

    # TODO: Find installed collections and compare the list with cl_collections

    - name: "Sanity: Collections must be installed."
      ansible.builtin.debug:
        msg: |-
          [ERR] Collections are not installed. End of play.
          Hint: Check the required collections are installed.
          {{ cl_collections }}

    - name: "Sanity: End of play"
      ansible.builtin.meta: end_play

- name: "Sanity: Data directories must exist."
  ansible.builtin.assert:
    quiet: "{{ cl_sanity_quiet }}"
    that:
      - cl_handlersd_dir is exists
      - cl_packagesd_dir is exists
      - cl_statesd_dir is exists
      - cl_servicesd_dir is exists
      - cl_filesd_dir is exists
    fail_msg: |-
      [ERR] Data directories do not exist.
      Hint: Check the existence of directories
      {{ cl_handlersd_dir }}
      {{ cl_packagesd_dir }}
      {{ cl_statesd_dir }}
      {{ cl_servicesd_dir }}
      {{ cl_filesd_dir }}

- name: "Sanity: Assembled data must exist in ansible_check_mode."
  when: ansible_check_mode
  ansible.builtin.assert:
    quiet: "{{ cl_sanity_quiet }}"
    that:
      - cl_packagesd is exists
      - cl_statesd is exists
      - cl_servicesd is exists
      - cl_filesd is exists
    fail_msg: |-
      [ERR] Assembled data do not exist in ansible_check_mode.
      Hint: Assemble variables first.
      Run: ansible-playbook playbook.yml -t cl_vars

- name: "Sanity: Supported modules for packages."
  when: cl_sanity_modules_pkg | bool
  vars:
    unsupported: "{{ cl_packages.values() | list |
                     json_query('[].module') | unique |
                     difference(cl_supported_modules_pkg) }}"
  ansible.builtin.assert:
    quiet: "{{ cl_sanity_quiet }}"
    that: unsupported | length == 0
    fail_msg: |-
      [ERR] Unsupported module(s) {{ unsupported }} in assembled packages.

- name: "Sanity: yamllint must be installed."
  when: cl_sanity_yamllint | bool
  vars:
    regex: ^yamllint \d+\.\d+\.\d+$
    out: "{{ lookup('pipe', cl_yamllint ~ ' --version') }}"
  ansible.builtin.assert:
    quiet: "{{ cl_sanity_quiet }}"
    that: out is match(regex)
    fail_msg: |-
      [ERR] yamllint not installed on controller.
    success_msg: |-
      [OK]  yamllint found on controller.

# EOF
