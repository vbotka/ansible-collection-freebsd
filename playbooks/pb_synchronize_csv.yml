---
# Copyright 2020 Vladimir Botka <vbotka@gmail.com>
# Simplified BSD License, https://opensource.org/licenses/BSD-2-Clause
# SPDX-License-Identifier: BSD-2-Clause

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Collection: vbotka.freebsd
# Playbook: pb_synchronize_csv.yml
#
# Description:
#
#   Rsync sources to destinations. Read data from CSV file. Create
#   group of destination hosts 'my_dest' in the first play. Use this
#   group of destinations in the second play to synchronize the sources to
#   the destinations.
#
# Input:
#
#   my_csv_file ............ CSV file (default: files/rsync.csv)
#
# Output:
#
#   None.
#
# Example:
#
#   shell> cat files/rsync.csv
#   src,dest,file
#   test_01,test_02,/scratch/file_01
#   test_01,test_02,/scratch/file_02
#   test_01,test_03,/scratch/file_01
#   shell> ansible-playbook synchronize_csv.yml -CD
#   shell> ansible-playbook synchronize_csv.yml -e my_debug=true
#   shell> ansible-playbook synchronize_csv.yml
#
# Notes:
#
#   * rsync must be installed on both src and dest hosts
#   * ansible_user@src must be able to connect to ansible_user@dest
#   * ansible_user@dest must be able to write the file
#   * optionally enable 'become*' in the second play
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# https://github.com/vbotka/ansible-collection-freebsd/playbooks/pb_synchronize_csv.yml

- name: Synchronize sources to destinations. Create group of destinations.
  hosts: localhost
  gather_facts: false

  vars:

    my_csv_file: files/rsync.csv

  tasks:

    - name: Read data from CSV file
      community.general.read_csv:
        path: "{{ my_csv_file }}"
      register: my_db

    - name: Create group of destinations
      ansible.builtin.add_host:
        hostname: "{{ item.dest }}"
        groups: my_dest
        my_list: "{{ my_db.list }}"
      loop: "{{ my_db.list }}"
      changed_when: false

- name: Synchronize sources to destinations. Run rsync.
  hosts: my_dest
  gather_facts: false
  # become: true
  # become_user: root
  # become_method: sudo

  vars:

    my_debug: false
    my_dryrun: false
    my_clear_host_errors: false
    my_display_results: false

  tasks:

    - name: Display debug and end host
      when: my_debug | bool
      block:

        - name: Display debug
          vars:
            _query: "[?dest == '{{ inventory_hostname }}']"
          ansible.builtin.debug:
            msg: |
              rsync {{ item.file }}
              from {{ item.src }} to {{ inventory_hostname }}
          loop: "{{ my_list | json_query(_query) }}"

        - name: End host
          ansible.builtin.meta: end_host

    - name: Synchronize sources to targets
      block:

        - name: Rsync
          vars:
            _query: "[?dest == '{{ inventory_hostname }}']"
          register: my_result
          delegate_to: "{{ item.src }}"
          ansible.posix.synchronize:
            archive: "{{ my_archive | d(omit) }}"
            checksum: "{{ my_checksum | d(omit) }}"
            compress: "{{ my_compress | d(omit) }}"
            copy_links: "{{ my_copy | d(omit) }}"
            delete: "{{ my_delete | d(omit) }}"
            dest: "{{ item.file }}"
            dest_port: "{{ my_dest_port | d(omit) }}"
            dirs: "{{ my_dirs | d(omit) }}"
            existing_only: "{{ my_existing_only | d(omit) }}"
            group: "{{ my_group | d(omit) }}"
            link_dest: "{{ my_link_dest | d(omit) }}"
            links: "{{ my_links | d(omit) }}"
            mode: "{{ my_mode | d(omit) }}"
            owner: "{{ my_owner | d(omit) }}"
            partial: "{{ my_partial | d(omit) }}"
            perms: "{{ my_perms | d(omit) }}"
            private_key: "{{ my_private_key | d(omit) }}"
            recursing: "{{ my_recursing | d(omit) }}"
            rsync_opts: "{{ my_rsync_opts | d(omit) }}"
            rsync_path: "{{ my_rsync_path | d(omit) }}"
            rsync_timeout: "{{ my_rsync_timeout | d(omit) }}"
            set_remote_user: "{{ my_set_remote_user | d(omit) }}"
            src: "{{ item.file }}"
            times: "{{ my_times | d(omit) }}"
            use_ssh_args: "{{ my_use_ssh_args | d(omit) }}"
            verify_host: "{{ my_verify_host | d(omit) }}"
          loop: "{{ my_list | json_query(_query) }}"

      rescue:

        - name: Clear host errors
          when: my_clear_host_errors | bool
          ansible.builtin.meta: clear_host_errors

      always:

        - name: Display results
          when: my_display_results | bool
          ansible.builtin.debug:
            var: my_results

# EOF
