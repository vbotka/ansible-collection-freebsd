---
# Copyright 2019 Vladimir Botka <vbotka@gmail.com>
# Simplified BSD License, https://opensource.org/licenses/BSD-2-Clause
# SPDX-License-Identifier: BSD-2-Clause

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Collection: vbotka.freebsd
# Playbook: pb_install_repos_from_git.yml
#
# Description: Clone repos by git module or command.
#
# Parameters:
#
#   my_repos_file ............. file with the list of the repos
#   my_repos_path ............. directory the repos will be fetched to
#   my_mode ................... mode fo the repos
#   my_user ................... owner of the repos
#   my_group .................. group of the repos
#   my_git_user ............... user allowed to read the repos from git
#   git_module ................ use Ansible git module instead of the command
#
# Notes:
#
#   * Used also by ansible-workbench.sh
#   * https://github.com/vbotka/ansible-ansible/contrib/workbench
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# https://github.com/vbotka/ansible-collection-freebsd/playbooks/pb_install_repos_from_git.yml

- name: Clone repos by git module or command.
  hosts: localhost
  gather_facts: false
  connection: local
  # debugger: on_failed

  vars_files: install_repos_from_git_roles_default.yml

  tasks:

    - name: "Include list of repos from {{ my_repos_file }}"
      ansible.builtin.include_vars: "{{ my_repos_file }}"

    - name: Debug
      when: debug | d(false) | bool
      ansible.builtin.debug:
        msg: "{{ msg.split('\n') }}"
      vars:
        msg: |
          git_module: {{ git_module }}
          my_git_user: {{ my_git_user }}
          my_user: {{ my_user }}
          my_group: {{ my_group }}
          my_mode: {{ my_mode }}
          my_repos_path: {{ my_repos_path }}
          my_repos_file: {{ my_repos_file }}
          ansible_check_mode: {{ ansible_check_mode }}
          requirements:
            {{ requirements | to_nice_yaml(indent=2) | indent(2) }}

    - name: Module git clone repos.
      when:
        - item.install | d(true)
        - git_module | bool
      ansible.builtin.git:
        repo: "{{ item.src }}"
        dest: "{{ my_repos_path }}/{{ item.name }}"
        version: "{{ item.version | d('HEAD') }}"
      loop: "{{ requirements }}"

    - name: Command git clone repos. # noqa: no-changed-when
      when:
        - item.install | d(true)
        - not git_module | bool
      ansible.builtin.command: "/bin/sh -c 'cd {{ my_repos_path }};
                                if [ -e {{ item.name | quote }} ]; then
                                   (cd {{ item.name }}; git pull);
                                else
                                   git clone {{ item.src }} {{ item.name }};
                                fi'"
      args:
        chdir: "{{ my_repos_path }}"
      loop: "{{ requirements }}"

    - name: Chown and chmod repos.
      when: item.install | d(true)
      ansible.builtin.file:
        state: directory
        recurse: true
        dest: "{{ my_repos_path }}/{{ item.name }}"
        owner: "{{ my_user }}"
        group: "{{ my_group }}"
        # mode: "{{ my_mode }}"
      loop: "{{ requirements }}"

    - name: Link repos.
      when:
        - item.install | d(true)
        - item.link is defined
      ansible.builtin.file:
        state: link
        src: "{{ my_repos_path }}/{{ item.name }}"
        dest: "{{ my_repos_path }}/{{ item.link }}"
        owner: "{{ my_user }}"
        group: "{{ my_group }}"
      loop: "{{ requirements }}"

# EOF
